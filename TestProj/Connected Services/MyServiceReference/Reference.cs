//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TestProj.MyServiceReference {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="MyServiceReference.IServerService", CallbackContract=typeof(TestProj.MyServiceReference.IServerServiceCallback))]
    public interface IServerService {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServerService/Registration")]
        void Registration(string login, string password, string[] rolesName);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServerService/Registration")]
        System.Threading.Tasks.Task RegistrationAsync(string login, string password, string[] rolesName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServerService/Auth", ReplyAction="http://tempuri.org/IServerService/AuthResponse")]
        CommandProject.MyServiceReference.User Auth(string login, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServerService/Auth", ReplyAction="http://tempuri.org/IServerService/AuthResponse")]
        System.Threading.Tasks.Task<CommandProject.MyServiceReference.User> AuthAsync(string login, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServerService/GetUser", ReplyAction="http://tempuri.org/IServerService/GetUserResponse")]
        CommandProject.MyServiceReference.User GetUser(string login);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServerService/GetUser", ReplyAction="http://tempuri.org/IServerService/GetUserResponse")]
        System.Threading.Tasks.Task<CommandProject.MyServiceReference.User> GetUserAsync(string login);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServerService/GetBugHistory", ReplyAction="http://tempuri.org/IServerService/GetBugHistoryResponse")]
        CommandProject.MyServiceReference.BugHistory[] GetBugHistory();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServerService/GetBugHistory", ReplyAction="http://tempuri.org/IServerService/GetBugHistoryResponse")]
        System.Threading.Tasks.Task<CommandProject.MyServiceReference.BugHistory[]> GetBugHistoryAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServerService/GetBugHistoryToNameUser", ReplyAction="http://tempuri.org/IServerService/GetBugHistoryToNameUserResponse")]
        CommandProject.MyServiceReference.BugHistory[] GetBugHistoryToNameUser(string nameUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServerService/GetBugHistoryToNameUser", ReplyAction="http://tempuri.org/IServerService/GetBugHistoryToNameUserResponse")]
        System.Threading.Tasks.Task<CommandProject.MyServiceReference.BugHistory[]> GetBugHistoryToNameUserAsync(string nameUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServerService/GetBugHistoryToDecriptionBug", ReplyAction="http://tempuri.org/IServerService/GetBugHistoryToDecriptionBugResponse")]
        CommandProject.MyServiceReference.BugHistory[] GetBugHistoryToDecriptionBug(string DescriptionBug);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServerService/GetBugHistoryToDecriptionBug", ReplyAction="http://tempuri.org/IServerService/GetBugHistoryToDecriptionBugResponse")]
        System.Threading.Tasks.Task<CommandProject.MyServiceReference.BugHistory[]> GetBugHistoryToDecriptionBugAsync(string DescriptionBug);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServerService/EditStatusBugs")]
        void EditStatusBugs(string Login, string DescriptionBugHistory, string status);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServerService/EditStatusBugs")]
        System.Threading.Tasks.Task EditStatusBugsAsync(string Login, string DescriptionBugHistory, string status);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServerService/DropBug")]
        void DropBug(string DescriptionBug, int UserId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServerService/DropBug")]
        System.Threading.Tasks.Task DropBugAsync(string DescriptionBug, int UserId);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServerService/AddBug")]
        void AddBug(CommandProject.MyServiceReference.User user, string Decription, byte[][] ImgBytes);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServerService/AddBug")]
        System.Threading.Tasks.Task AddBugAsync(CommandProject.MyServiceReference.User user, string Decription, byte[][] ImgBytes);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServerServiceCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServerService/Message")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(CommandProject.MyServiceReference.User))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(CommandProject.MyServiceReference.Role[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(CommandProject.MyServiceReference.Role))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(CommandProject.MyServiceReference.User[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(CommandProject.MyServiceReference.BugHistory[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(CommandProject.MyServiceReference.BugHistory))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(CommandProject.MyServiceReference.Bug))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(CommandProject.MyServiceReference.Picture[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(CommandProject.MyServiceReference.Picture))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(CommandProject.MyServiceReference.Status))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(string[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(byte[][]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(byte[]))]
        void Message([System.ServiceModel.MessageParameterAttribute(Name="message")] object message1, string descr);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServerServiceChannel : TestProj.MyServiceReference.IServerService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServerServiceClient : System.ServiceModel.DuplexClientBase<TestProj.MyServiceReference.IServerService>, TestProj.MyServiceReference.IServerService {
        
        public ServerServiceClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public ServerServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public ServerServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ServerServiceClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ServerServiceClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void Registration(string login, string password, string[] rolesName) {
            base.Channel.Registration(login, password, rolesName);
        }
        
        public System.Threading.Tasks.Task RegistrationAsync(string login, string password, string[] rolesName) {
            return base.Channel.RegistrationAsync(login, password, rolesName);
        }
        
        public CommandProject.MyServiceReference.User Auth(string login, string password) {
            return base.Channel.Auth(login, password);
        }
        
        public System.Threading.Tasks.Task<CommandProject.MyServiceReference.User> AuthAsync(string login, string password) {
            return base.Channel.AuthAsync(login, password);
        }
        
        public CommandProject.MyServiceReference.User GetUser(string login) {
            return base.Channel.GetUser(login);
        }
        
        public System.Threading.Tasks.Task<CommandProject.MyServiceReference.User> GetUserAsync(string login) {
            return base.Channel.GetUserAsync(login);
        }
        
        public CommandProject.MyServiceReference.BugHistory[] GetBugHistory() {
            return base.Channel.GetBugHistory();
        }
        
        public System.Threading.Tasks.Task<CommandProject.MyServiceReference.BugHistory[]> GetBugHistoryAsync() {
            return base.Channel.GetBugHistoryAsync();
        }
        
        public CommandProject.MyServiceReference.BugHistory[] GetBugHistoryToNameUser(string nameUser) {
            return base.Channel.GetBugHistoryToNameUser(nameUser);
        }
        
        public System.Threading.Tasks.Task<CommandProject.MyServiceReference.BugHistory[]> GetBugHistoryToNameUserAsync(string nameUser) {
            return base.Channel.GetBugHistoryToNameUserAsync(nameUser);
        }
        
        public CommandProject.MyServiceReference.BugHistory[] GetBugHistoryToDecriptionBug(string DescriptionBug) {
            return base.Channel.GetBugHistoryToDecriptionBug(DescriptionBug);
        }
        
        public System.Threading.Tasks.Task<CommandProject.MyServiceReference.BugHistory[]> GetBugHistoryToDecriptionBugAsync(string DescriptionBug) {
            return base.Channel.GetBugHistoryToDecriptionBugAsync(DescriptionBug);
        }
        
        public void EditStatusBugs(string Login, string DescriptionBugHistory, string status) {
            base.Channel.EditStatusBugs(Login, DescriptionBugHistory, status);
        }
        
        public System.Threading.Tasks.Task EditStatusBugsAsync(string Login, string DescriptionBugHistory, string status) {
            return base.Channel.EditStatusBugsAsync(Login, DescriptionBugHistory, status);
        }
        
        public void DropBug(string DescriptionBug, int UserId) {
            base.Channel.DropBug(DescriptionBug, UserId);
        }
        
        public System.Threading.Tasks.Task DropBugAsync(string DescriptionBug, int UserId) {
            return base.Channel.DropBugAsync(DescriptionBug, UserId);
        }
        
        public void AddBug(CommandProject.MyServiceReference.User user, string Decription, byte[][] ImgBytes) {
            base.Channel.AddBug(user, Decription, ImgBytes);
        }
        
        public System.Threading.Tasks.Task AddBugAsync(CommandProject.MyServiceReference.User user, string Decription, byte[][] ImgBytes) {
            return base.Channel.AddBugAsync(user, Decription, ImgBytes);
        }
    }
}
